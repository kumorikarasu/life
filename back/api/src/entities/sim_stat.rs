//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sim_stat")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub sim_id: i32,
    pub name: String,
    pub value: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sim::Entity",
        from = "Column::SimId",
        to = "super::sim::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Sim,
}

impl Related<super::sim::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sim.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
